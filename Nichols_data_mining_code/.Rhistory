pcc=(melt_dist(as.dist( (cor(t(All_Data_NAimputed))))))$value
spearman=(melt_dist(as.dist(cor(t(All_Data_NAimputed),method="spearman"))))$value
strain1_strain2_pcc_spearman_manyMI['pcc']=pcc
strain1_strain2_pcc_spearman_manyMI['spearman']=spearman
#mi, ternary_mi and mi_ternary_collapsedCond are now all similarity based distance. I have to convert them back to original mi
strain1_strain2_pcc_spearman_manyMI$mi=1-strain1_strain2_pcc_spearman_manyMI$mi
strain1_strain2_pcc_spearman_manyMI$mi_ternary=1-strain1_strain2_pcc_spearman_manyMI$mi_ternary
strain1_strain2_pcc_spearman_manyMI$mi_ternary_collapsedCond=1-strain1_strain2_pcc_spearman_manyMI$mi_ternary_collapsedCond
#I had to use the following round2() function because the original round() in R doesn't process 0.5 -> 1 but 0.5 ->0(ref: https://stackoverflow.com/questions/12688717/round-up-from-5)
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
count=0
for(similarity in strain1_strain2_pcc_spearman_manyMI[,c("pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond")]){
strain1_strain2_pcc_spearman_manyMI[[3+count]]=round2(similarity,4)
count=count+1
}
ECK_index_1=base::match(strain1strain2_allDistances[,'strain1'],id_ECK_gene[,'ids'])
ECK_index_2=base::match(strain1strain2_allDistances[,'strain2'],id_ECK_gene[,'ids'])
strain1_strain2_pcc_spearman_manyMI['strain1']=paste0(id_ECK_gene[['ECK']][ECK_index_1],"-",id_ECK_gene[['associated_gene_names']][ECK_index_1])
strain1_strain2_pcc_spearman_manyMI['strain2']=paste0(id_ECK_gene[['ECK']][ECK_index_2],"-",id_ECK_gene[['associated_gene_names']][ECK_index_2])
#correct the escape character issue (there are ' in some ECKs). They seem to mean nothing, so I will just remove them
strain1_strain2_pcc_spearman_manyMI$strain1=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI$strain1,"'","")
strain1_strain2_pcc_spearman_manyMI$strain2=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI$strain2,"'","")
names(strain1_strain2_pcc_spearman_manyMI)[1:2]=c("Strain 1","Strain 2")
#save(strain1_strain2_pcc_spearman_manyMI,file="strain1_strain2_pcc_spearman_manyMI.RData")
chunk2 = function(x,n) split(x, cut(seq_along(x), n, labels = FALSE)) #https://stackoverflow.com/questions/3318333/split-a-vector-into-chunks-in-r
total_length=dim(strain1_strain2_pcc_spearman_manyMI)[1]
n=5
partitions=chunk2(seq(total_length),n)
i=1
for(parition in partitions){
dat=strain1_strain2_pcc_spearman_manyMI[parition,]
file_name=paste0("Data/strain1_strain2_pcc_spearman_manyMI_",i,".txt")
write.table(dat,file=file_name,row.names=F,sep="\t")
i=i+1
}
View(strain1_strain2_pcc_spearman_manyMI)
#run this via terminal. cd into this folder first
source("https://raw.githubusercontent.com/peterwu19881230/R_Utility/master/functions.R")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path) #only works in RStudio console
setwd(currentDir)
load("Data/strain1strain2_allDistances.RData")
load("Data/id_allAttributes.RData")
load("Data/All_Data_NAimputed.RData")
names(strain1strain2_allDistances)
#run this via terminal. cd into this folder first
source("https://raw.githubusercontent.com/peterwu19881230/R_Utility/master/functions.R")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path) #only works in RStudio console
setwd(currentDir)
load("Data/strain1strain2_allDistances.RData")
load("Data/id_allAttributes.RData")
load("Data/All_Data_NAimputed.RData")
id_ECK_gene=unique(id_allAttributes[,c("ids","ECK","associated_gene_names")])
id_ECK_gene['ids']=as.numeric(id_ECK_gene[,'ids'])
strain1_strain2_pcc_spearman_manyMI_WangSim=strain1strain2_allDistances[,c("strain1","strain2",
"pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
#pcc and spearman here are correlation based distance, so I have to re-calculate to get real coefficients
pcc=(melt_dist(as.dist( (cor(t(All_Data_NAimputed))))))$value
spearman=(melt_dist(as.dist(cor(t(All_Data_NAimputed),method="spearman"))))$value
strain1_strain2_pcc_spearman_manyMI_WangSim['pcc']=pcc
strain1_strain2_pcc_spearman_manyMI_WangSim['spearman']=spearman
#mi, ternary_mi and mi_ternary_collapsedCond are now all similarity based distances. I have to convert them back to original mi
strain1_strain2_pcc_spearman_manyMI_WangSim$mi=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi
strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary
strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary_collapsedCond=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary_collapsedCond
#I had to use the following round2() function because the original round() in R doesn't process 0.5 -> 1 but 0.5 ->0(ref: https://stackoverflow.com/questions/12688717/round-up-from-5)
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
count=0
for(similarity in strain1_strain2_pcc_spearman_manyMI_WangSim[,c("pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]){
strain1_strain2_pcc_spearman_manyMI_WangSim[[3+count]]=round2(similarity,4)
count=count+1
}
ECK_index_1=base::match(strain1strain2_allDistances[,'strain1'],id_ECK_gene[,'ids'])
ECK_index_2=base::match(strain1strain2_allDistances[,'strain2'],id_ECK_gene[,'ids'])
strain1_strain2_pcc_spearman_manyMI_WangSim['strain1']=paste0(id_ECK_gene[['ECK']][ECK_index_1],"-",id_ECK_gene[['associated_gene_names']][ECK_index_1])
strain1_strain2_pcc_spearman_manyMI_WangSim['strain2']=paste0(id_ECK_gene[['ECK']][ECK_index_2],"-",id_ECK_gene[['associated_gene_names']][ECK_index_2])
#correct the escape character issue (there are ' in some ECKs). They seem to mean nothing, so I will just remove them
strain1_strain2_pcc_spearman_manyMI_WangSim$strain1=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI_WangSim$strain1,"'","")
strain1_strain2_pcc_spearman_manyMI_WangSim$strain2=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI_WangSim$strain2,"'","")
names(strain1_strain2_pcc_spearman_manyMI_WangSim)[1:2]=c("Strain 1","Strain 2")
save(strain1_strain2_pcc_spearman_manyMI_WangSim,file="strain1_strain2_pcc_spearman_manyMI_WangSim.RData")
#The following partitions the table
#n=5
#chunk2 = function(x,n) split(x, cut(seq_along(x), n, labels = FALSE)) #https://stackoverflow.com/questions/3318333/split-a-vector-into-chunks-in-r
#total_length=dim(strain1_strain2_pcc_spearman_manyMI_WangSim)[1]
#partitions=chunk2(seq(total_length),n)
#i=1
#for(parition in partitions){
#  dat=strain1_strain2_pcc_spearman_manyMI_WangSim[parition,]
#  file_name=paste0("Data/strain1_strain2_pcc_spearman_manyMI_WangSim_",i,".txt")
#  write.table(dat,file=file_name,row.names=F,sep="\t")
#  i=i+1
#}
#run this via terminal. cd into this folder first
source("https://raw.githubusercontent.com/peterwu19881230/R_Utility/master/functions.R")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path) #only works in RStudio console
setwd(currentDir)
load("Data/strain1strain2_allDistances.RData")
load("Data/id_allAttributes.RData")
load("Data/All_Data_NAimputed.RData")
id_ECK_gene=unique(id_allAttributes[,c("ids","ECK","associated_gene_names")])
id_ECK_gene['ids']=as.numeric(id_ECK_gene[,'ids'])
strain1_strain2_pcc_spearman_manyMI_WangSim=strain1strain2_allDistances[,c("strain1","strain2",
"pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
#pcc and spearman here are correlation based distance, so I have to re-calculate to get real coefficients
pcc=(melt_dist(as.dist( (cor(t(All_Data_NAimputed))))))$value
spearman=(melt_dist(as.dist(cor(t(All_Data_NAimputed),method="spearman"))))$value
strain1_strain2_pcc_spearman_manyMI_WangSim['pcc']=pcc
strain1_strain2_pcc_spearman_manyMI_WangSim['spearman']=spearman
#mi, ternary_mi and mi_ternary_collapsedCond are now all similarity based distances. I have to convert them back to original mi
strain1_strain2_pcc_spearman_manyMI_WangSim$mi=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi
strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary
strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary_collapsedCond=1-strain1_strain2_pcc_spearman_manyMI_WangSim$mi_ternary_collapsedCond
#I had to use the following round2() function because the original round() in R doesn't process 0.5 -> 1 but 0.5 ->0(ref: https://stackoverflow.com/questions/12688717/round-up-from-5)
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
count=0
for(similarity in strain1_strain2_pcc_spearman_manyMI_WangSim[,c("pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]){
strain1_strain2_pcc_spearman_manyMI_WangSim[[3+count]]=round2(similarity,4)
count=count+1
}
ECK_index_1=base::match(strain1strain2_allDistances[,'strain1'],id_ECK_gene[,'ids'])
ECK_index_2=base::match(strain1strain2_allDistances[,'strain2'],id_ECK_gene[,'ids'])
strain1_strain2_pcc_spearman_manyMI_WangSim['strain1']=paste0(id_ECK_gene[['ECK']][ECK_index_1],"-",id_ECK_gene[['associated_gene_names']][ECK_index_1])
strain1_strain2_pcc_spearman_manyMI_WangSim['strain2']=paste0(id_ECK_gene[['ECK']][ECK_index_2],"-",id_ECK_gene[['associated_gene_names']][ECK_index_2])
#correct the escape character issue (there are ' in some ECKs). They seem to mean nothing, so I will just remove them
strain1_strain2_pcc_spearman_manyMI_WangSim$strain1=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI_WangSim$strain1,"'","")
strain1_strain2_pcc_spearman_manyMI_WangSim$strain2=stringr::str_replace_all(strain1_strain2_pcc_spearman_manyMI_WangSim$strain2,"'","")
names(strain1_strain2_pcc_spearman_manyMI_WangSim)[1:2]=c("Strain 1","Strain 2")
write.table(strain1_strain2_pcc_spearman_manyMI_WangSim,file=strain1_strain2_pcc_spearman_manyMI_WangSim.txt,row.names=F,sep="\t")
#save(strain1_strain2_pcc_spearman_manyMI_WangSim,file="strain1_strain2_pcc_spearman_manyMI_WangSim.RData")
#The following partitions the table
#n=5
#chunk2 = function(x,n) split(x, cut(seq_along(x), n, labels = FALSE)) #https://stackoverflow.com/questions/3318333/split-a-vector-into-chunks-in-r
#total_length=dim(strain1_strain2_pcc_spearman_manyMI_WangSim)[1]
#partitions=chunk2(seq(total_length),n)
#i=1
#for(parition in partitions){
#  dat=strain1_strain2_pcc_spearman_manyMI_WangSim[parition,]
#  file_name=paste0("Data/strain1_strain2_pcc_spearman_manyMI_WangSim_",i,".txt")
#  write.table(dat,file=file_name,row.names=F,sep="\t")
#  i=i+1
#}
write.table(strain1_strain2_pcc_spearman_manyMI_WangSim,file="Data/strain1_strain2_pcc_spearman_manyMI_WangSim.txt",row.names=F,sep="\t")
View(strain1_strain2_pcc_spearman_manyMI_WangSim)
names)strain1_strain2_pcc_spearman_manyMI_WangSim
names(strain1_strain2_pcc_spearman_manyMI_WangSim)
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path) #only works in RStudio console
setwd(currentDir)
#----------------------------------------------------------------------------------------
#PPDK_miR399c
PPDK_miR399c=readxl::read_excel("qPCR_maize_time courses.xlsx",sheet="PPDK_miR399c")
#RbcS-1A_miR167i
RbcS_1A_miR167i=readxl::read_excel("qPCR_maize_time courses.xlsx",sheet="RbcS-1A_miR167i")
#tissue specific
tissue_specific=readxl::read_excel("qPCR_maize_time courses.xlsx",sheet="tissue specific")
x=as.numeric(RbcS_1A_miR167i$RbcS[1:17]); y=as.numeric(RbcS_1A_miR167i$RbcS[20:36])
df=data.frame(x=x,y=y)
df
ggplot(df,aes(x=x,y=y))+geom_point()
library(ggplot2)
library(ggplot2)
ggplot(df,aes(x=x,y=y))+geom_point()
ggplot(df,aes(x=x,y=y,color="blue"))+geom_point()
ggplot(df,aes(x=x,y=y))+geom_point(color="blue")
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")
fit=lm(y~x)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
nnotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,size=5)
label=paste0("r^2 = ",round(cor(x,y)^2,5))
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,size=5)
label="paste0(italic(R)^2,\" = \",round(cor(x,y)^2,5))"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = "paste(italic(R) ^ 2, \" = .75\")"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
?paste0
label = "paste(italic(R) ^ 2, round(cor(x,y)^2)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = "paste(italic(R) ^ 2, \" = \",round(cor(x,y)^2)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
cor=round(cor(x,y)^2)
label = "paste(italic(R) ^ 2, \" = \",cor"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = "paste(italic(R) ^ 2, \" = \",cor")
label = "paste(italic(R) ^ 2, \" = \",cor")"
df=data.frame(x=x,y=y)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
label = "paste(italic(R) ^ 2, \" = \",cor)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = "paste(italic(R) ^ 2, \" = \",cor)"
label
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
cor
cor=round(cor(x,y)^2)
cor
x
y
cor(x,y)
round(cor(x,y)^2)
round(cor(x,y)^2,4)
round(cor(x,y)^2,9)
round(cor(x,y)^2,6)
#label = "paste(italic(R) ^ 2, \" = \",cor)"
label = paste(italic(R) ^ 2, " = ",cor)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
#label = "paste(italic(R) ^ 2, \" = \",cor)"
label = paste(italic(R) ^ 2, " = ",cor)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=paste(italic(R) ^ 2, " = ",cor),parse=T,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label_1,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label_2,parse=T,size=5)
label_1 = "paste(italic(R) ^ 2, \" = \")"
label_2=cor
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label_1,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label_2,parse=T,size=5)
label_1 = paste("paste(italic(R) ^ 2, \" = \")",cor)
label_1 = paste("paste(italic(R) ^ 2, \" = \")",cor)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
}
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=F,size=5)
cor=round(cor(x,y)^2,6)
label = "paste(italic(R) ^ 2, \" = \",cor)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=F,size=5)
label = "paste(italic(R) ^ 2, \" = \",cor)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = paste("paste(italic(R) ^ 2, \" = \",cor)",cor)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
label = "paste(italic(R) ^ 2, \" = \",cor)"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)
?lm_eqn
as.expression
?as.expression
as.expression(italic(R) ^ 2)
as.expression($ ^ 2)
as.expression(R ^ 2)
as.expression("R ^ 2")
as.character(as.expression("R ^ 2"))
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
range(0,6)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.74, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.7, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.77, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.77, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.8, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.9, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
label = "paste(italic(R) ^ 2, \" = \")"
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.9, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.85, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.86, y=(max(y)-min(y))*0.85,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.86, y=(max(y)-min(y))*0.845,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
scale_x_continuous(labels="asdf")+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.86, y=(max(y)-min(y))*0.845,label=cor,parse=F,size=5)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
scale_x_continuous(name="asdf")+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.86, y=(max(y)-min(y))*0.845,label=cor,parse=F,size=5)
plot_cor=function(x,y,xlab="",ylab=""){
dat=data.frame(x=x,y=y)
fit=lm(y~x)
cor=round(cor(x,y)^2,6)
label = "paste(italic(R) ^ 2, \" = \")"
df=data.frame(x=x,y=y)
ggplot(df,aes(x=x,y=y))+geom_point(color="blue",alpha=0.6)+
scale_x_continuous(name=xlab)+
scale_y_continuous(name=ylab)+
theme(legend.position = "none")+
geom_abline(slope=fit$coefficients[2],intercept=fit$coefficients[1],color="#34b4eb")+
annotate("text",x=(max(x)-min(x))*0.75, y=(max(y)-min(y))*0.85,label=label,parse=T,size=5)+
annotate("text",x=(max(x)-min(x))*0.86, y=(max(y)-min(y))*0.845,label=cor,parse=F,size=5)
}
plot_cor(PPDK_miR399c$PPDK,PPDK_miR399c$miR399c,"PPDK","miR399c")
plot_cor(as.numeric(RbcS_1A_miR167i$RbcS[1:17]),as.numeric(RbcS_1A_miR167i$...5[20:36]),"RbcS","miR167i_new")
plot_cor(c(tissue_specific$RbcS,tissue_specific$...3),c(tissue_specific$miR167i,tissue_specific$...7),"RbcS","miR167i")
plot_cor(c(tissue_specific$PPDK,tissue_specific$...5),c(tissue_specific$miR399c,tissue_specific$...9),"PPDK","miR399c")
?wilcox.test
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
setwd("/Users/peterwu/Dropbox/HuLab/microbial_phenotype_data_mining/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code")
source("Nichols_preload.R")
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
df=df[order(df$Wang_BP,decreasing=T),][1:2000,]
View(df)
View(id_allAttributes)
id_ECK_gene=id_allAttributes[,c("ids","ECK","associate_gene_names")]
names(id_allAttributes)
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")]
head(id_ECK_gene)
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")] %>% unique
dim(id_ECK_gene)
head(id_ECK_gene)
paste(1:5,6:10)
?paste
id_ECKandGene=data.frame(id=id_ECK_gene,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
head(id_ECKandGene)
id_ECKandGene=data.frame(id=id_ECK_gene$ids,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
head(id_ECKandGene)
names(df)
out=left_join(df,id_ECKandGene,by=("strain1"="id"))
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
str(id_ECK_gene)
str(df)
id_ECKandGene$id=as.integer(id_ECKandGene$id)
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
head(out)
out=left_join(out,id_ECKandGene,by=c("strain2"="id"))
head(out)
names(out)
out=out[,c("gene.x","gene.y","Pwy","pcomplex","operon","regulator","kegg_modules","pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
dim(out)
names(out)[1:2]=c("gene_1","gene_2")
?write.csv
getwd()
write.csv(out,file="first_2000_GO_BP_pairs.csv")
no_of_pairs=10000
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
df=df[order(df$Wang_BP,decreasing=T),][1:no_of_pairs,]
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")] %>% unique
id_ECKandGene=data.frame(id=id_ECK_gene$ids,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
id_ECKandGene$id=as.integer(id_ECKandGene$id)
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
out=left_join(out,id_ECKandGene,by=c("strain2"="id"))
out=out[,c("gene.x","gene.y","Pwy","pcomplex","operon","regulator","kegg_modules","pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
names(out)[1:2]=c("gene_1","gene_2")
write.csv(out,file="first_2000_GO_BP_pairs.csv")
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
summary(df$Wang_BP)
hist(df$Wang_BP)
#no_of_pairs=10000
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
df=df[order(df$Wang_BP,decreasing=T),]  #[1:no_of_pairs,]
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")] %>% unique
id_ECKandGene=data.frame(id=id_ECK_gene$ids,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
id_ECKandGene$id=as.integer(id_ECKandGene$id)
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
out=left_join(out,id_ECKandGene,by=c("strain2"="id"))
out=out[,c("gene.x","gene.y","Pwy","pcomplex","operon","regulator","kegg_modules","pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
names(out)[1:2]=c("gene_1","gene_2")
write.csv(out,file="first_2000_GO_BP_pairs.csv")
no_of_pairs=1000000
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
df=df[order(df$Wang_BP,decreasing=T),][1:no_of_pairs,]
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")] %>% unique
id_ECKandGene=data.frame(id=id_ECK_gene$ids,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
id_ECKandGene$id=as.integer(id_ECKandGene$id)
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
out=left_join(out,id_ECKandGene,by=c("strain2"="id"))
out=out[,c("gene.x","gene.y","Pwy","pcomplex","operon","regulator","kegg_modules","pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
names(out)[1:2]=c("gene_1","gene_2")
write.csv(out,file="top_GO_BP_pairs.csv")
no_of_pairs=10000
df=strain1strain2_allAnnotations_allDistances
df=df[!is.na(df$Wang_BP),]
df=df[order(df$Wang_BP,decreasing=T),][1:no_of_pairs,]
id_ECK_gene=id_allAttributes[,c("ids","ECK","associated_gene_names")] %>% unique
id_ECKandGene=data.frame(id=id_ECK_gene$ids,gene=paste(id_ECK_gene$ECK,id_ECK_gene$associated_gene_names,sep="-"))
id_ECKandGene$id=as.integer(id_ECKandGene$id)
out=left_join(df,id_ECKandGene,by=c("strain1"="id"))
out=left_join(out,id_ECKandGene,by=c("strain2"="id"))
out=out[,c("gene.x","gene.y","Pwy","pcomplex","operon","regulator","kegg_modules","pcc","spearman","mi","mi_ternary","mi_ternary_collapsedCond","Wang_BP")]
names(out)[1:2]=c("gene_1","gene_2")
write.csv(out,file="top_10000_GO_BP_pairs.csv")
