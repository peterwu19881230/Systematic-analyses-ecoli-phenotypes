e
test=1
test+2
install.packages("IRkernel")
library(IRkernel)
q()
(1/48*(8^3)+1/32*(8^2))-(1/48*(6^3)+1/32*(6^2))
X=rnorm(10^5)
Y=X^4+2*X^3-3
hist(Y,breaks=50,freq=F)
d=density(Y)
lines(d,col="blue")
y=rnorm(1000,mean=3,sd=sqrt(2)) plot.ecdf(y)
plot.ecdf(y)
y=rnorm(1000,mean=3,sd=sqrt(2))
plot.ecdf(y)
x=seq(-2,8,length=1001) lines(x,pnorm(x,mean=3,sd=sqrt(2)),col=2)
x=seq(-2,8,length=1001)
lines(x,pnorm(x,mean=3,sd=sqrt(2)),col=2)
1-pgamma(2191.5,200,1/10)
1-pgamma(2191.5,250,1/10)
6*365
pnorm(0.3/sqrt(12/20))-pnorm((2.5-3)/sqrt(12/20))
hist(rnorm(1000,3,sqrt(2)),breaks=seq(-3,9,length=13),freq=FALSE)
X=rnorm(1000,3,sqrt(2)
hist(),breaks=seq(-3,9,length=13),freq=FALSE)
X=rnorm(1000,3,sqrt(2))
hist(X,breaks=seq(-3,9,length=13),freq=FALSE)
d=density(X)
lines(d,col="blue")
hist(X,breaks=seq(-3,9,length=13),freq=FALSE,xlim=c(-5,10))
X=rnorm(1000,3,sqrt(2))
hist(X,breaks=seq(-3,9,length=13),freq=FALSE,xlim=c(-5,10))
d=density(X)
lines(d,col="blue")
?seq
X=rnorm(1000,3,sqrt(2))
hist(X,breaks=seq(-3,9,length=13,by=1),freq=FALSE,xlim=c(-5,10))
d=density(X)
lines(d,col="blue")
?seq
hist(X,breaks=seq(-3,10,by=1),freq=FALSE,xlim=c(-5,10))
hist(X,breaks=seq(-5,10,by=1),freq=FALSE,xlim=c(-5,10))
X=rnorm(1000,3,sqrt(2))
hist(X,breaks=seq(-5,10,by=1),freq=FALSE,xlim=c(-5,10))
d=density(X)
lines(d,col="blue")
X=rnorm(1000,3,sqrt(2))
hist(X,breaks=seq(-5,10,by=0.1),freq=FALSE,xlim=c(-5,10))
d=density(X)
lines(d,col="blue")
str(strain1_strain2_pcc_spearman_manyMI_WangSim)
rm(list=ls())
setwd("~/Dropbox/OMP\ shared/peter_wu/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code")
source("Nichols_preload.R")
load("Data/mi_all_noMinimalMedia.RData")
head(i_all_noMinimalMedia)
head(mi_all_noMinimalMedia)
dim(mi_all)
setwd("~/Dropbox/OMP\ shared/peter_wu/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code")
source("Nichols_preload.R")
#Quantitative:
##PCC
pcc=( cor(t(All_Data_NAimputed)) ) %>% as.dist %>% melt_dist
##Spearman
spearman=( cor(t(All_Data_NAimputed),method="spearman") ) %>% as.dist %>% melt_dist
str(mi)
str(mi_all)
##Mutual Information (Sho)
##Ref: https://cran.r-project.org/web/packages/infotheo/infotheo.pdf
###start.time = Sys.time()
###mi_ternary=( 1- mutinformation(t(Ternary_Data_324cutff_NAremoved) %>% as.data.frame) %>% natstobits ) %>% melt_dist
###end.time = Sys.time()
###end.time-start.time #Time difference of 1.059961 hours
####save(mi_ternary,file="Data/mi_ternary.RData")
load("Data/mi_ternary.RData")
str(mi_ternary)
mi_ternary$Distance=1-mi_ternary$Distance
save(mi_ternary,file="Data/mi_ternary.RData")
###start.time = Sys.time()
###mi_ternary_collapsedCond=( mutinformation(t(Ternary_Data_324cutff_condCollapsed) %>% as.data.frame) %>% natstobits ) %>% melt_dist
###end.time = Sys.time()
###end.time-start.time #Time difference of 22.47311 mins
#save(mi_ternary_collapsedCond,file="Data/mi_ternary_collapsedCond.RData")
load("Data/mi_ternary_collapsedCond.RData")
str(mi_ternary_collapsedCond)
mi_ternary_collapsedCond$Distance=1-mi_ternary_collapsedCond$Distance
save(mi_ternary_collapsedCond,file="Data/mi_ternary_collapsedCond.RData")
##GO similarity (Wang method)
load('Data/strain1_strain2_WangBP_WangMF_WangCC.RData')
strain1strain2_allSimilarities=cbind(pcc,
spearman=spearman[[3]],
#euclidean=euclidean[[3]],
mi=mi[[3]],
#euclidean_qualitative=euclidean_qualitative[[3]],
#euclidean_collapsedCond=euclidean_collapsedCond[[3]],
#mhd3=mhd3[[3]],
#mhd3_collapsedCond=mhd3_collapsedCond[[3]],
mi_ternary=mi_ternary[[3]],
mi_ternary_collapsedCond=mi_ternary_collapsedCond[[3]],
Wang_BP=strain1_strain2_WangBP_WangMF_WangCC$BP,
Wang_MF=strain1_strain2_WangBP_WangMF_WangCC$MF,
Wang_CC=strain1_strain2_WangBP_WangMF_WangCC$CC,
stringsAsFactors=F)
colnames(strain1strain2_allSimilarities)[1:3]=c("strain1","strain2","pcc")
strain1strain2_allSimilarities$strain1=as.integer(strain1strain2_allSimilarities$strain1)
strain1strain2_allSimilarities$strain2=as.integer(strain1strain2_allSimilarities$strain2)
for(i in 3:dim(strain1strain2_allSimilarities)[2]){
strain1strain2_allSimilarities[,i]=as.numeric(strain1strain2_allSimilarities[,i])
}
rownames(strain1strain2_allSimilarities)=as.character(1:7914231) #correct the rownames (don't know why it started with 2)
save(strain1strain2_allSimilarities,file="Data/strain1strain2_allSimilarities.RData")
mi=mi_all %>% as.dist %>% melt_dist
strain1strain2_allSimilarities=cbind(pcc,
spearman=spearman[[3]],
#euclidean=euclidean[[3]],
mi=mi[[3]],
#euclidean_qualitative=euclidean_qualitative[[3]],
#euclidean_collapsedCond=euclidean_collapsedCond[[3]],
#mhd3=mhd3[[3]],
#mhd3_collapsedCond=mhd3_collapsedCond[[3]],
mi_ternary=mi_ternary[[3]],
mi_ternary_collapsedCond=mi_ternary_collapsedCond[[3]],
Wang_BP=strain1_strain2_WangBP_WangMF_WangCC$BP,
Wang_MF=strain1_strain2_WangBP_WangMF_WangCC$MF,
Wang_CC=strain1_strain2_WangBP_WangMF_WangCC$CC,
stringsAsFactors=F)
colnames(strain1strain2_allSimilarities)[1:3]=c("strain1","strain2","pcc")
strain1strain2_allSimilarities$strain1=as.integer(strain1strain2_allSimilarities$strain1)
strain1strain2_allSimilarities$strain2=as.integer(strain1strain2_allSimilarities$strain2)
for(i in 3:dim(strain1strain2_allSimilarities)[2]){
strain1strain2_allSimilarities[,i]=as.numeric(strain1strain2_allSimilarities[,i])
}
rownames(strain1strain2_allSimilarities)=as.character(1:7914231) #correct the rownames (don't know why it started with 2)
save(strain1strain2_allSimilarities,file="Data/strain1strain2_allSimilarities.RData")
#Execute by: Rscript "path to Nichols_Data_Mining"
args = commandArgs(TRUE)
setwd(args)
load("Data/strain1_strain2.RData")
load("Data/strain1strain2_allAnnotations.RData")
load("Data/strain1strain2_allSimilarities.RData")
args
strain1strain2_allAnnotations_allSimilarities=cbind(strain1strain2_allAnnotations,strain1strain2_allSimilarities[,-(1:2)],stringsAsFactors=F)
TF=apply(sigQuantitative_Data_324cutoff_condCollapsed,1,FUN=function(row){
sum(row!=0)>0
})
index=rownames(sigQuantitative_Data_324cutoff_condCollapsed)[TF] %>% as.integer
sigOrNot=( (strain1_strain2$strain1 %in% index) & (strain1_strain2$strain2 %in% index) ) #2438736
strain1strain2_allAnnotations_allSimilarities$sigPhenoInBoth=sigOrNot
#change some colnames
names(strain1strain2_allAnnotations_allSimilarities)[names(strain1strain2_allAnnotations_allSimilarities)=='regulator']='regulon'
names(strain1strain2_allAnnotations_allSimilarities)[names(strain1strain2_allAnnotations_allSimilarities)=='Pwy']='pwy'
save(strain1strain2_allAnnotations_allSimilarities,file="Data/sourced/strain1strain2_allAnnotations_allSimilarities.RData")
load('mi_all_noMinimalMedia_old.RData')
str(mi_all)
mi_all=mi_all/log(2) #convert nats to bits
mi=mi_all %>% as.dist %>% melt_dist
hist(m)
hist(mi)
str(mi)
hist(mi$value)
summary(mi$value)
dat=Ternary_Data_324cutff_NAremoved[,cond_indices]
source("Nichols_preload.R")
load("Data/uniqueChemIndex.RData")
TF=( names(uniqueChemIndex) %in% c("NH4Cl (MOPS)","Iron excess-FeSO4","Iron starvation-FeSO4","Acetate (M9)",
"Glucosamine (M9)","Glucose (M9)","Glycerol (M9)","Maltose (M9)","N-acetyl Glucosamine","Succinate (M9)") )
used_cond=names(uniqueChemIndex)[!TF]
cond_indices=unlist(uniqueChemIndex[used_cond])
#Quantitative:
##PCC
pcc= (cor(t(dat))) %>% as.dist %>% melt_dist
##Spearman
spearman=cor(t(dat),method="spearman") %>% as.dist %>% melt_dist
dat=All_Data_NAimputed[,cond_indices]
#Quantitative:
##PCC
pcc= (cor(t(dat))) %>% as.dist %>% melt_dist
##Spearman
spearman=cor(t(dat),method="spearman") %>% as.dist %>% melt_dist
load("Data/mi_ternary_noMinimalMedia.RData")
#If the first 2 columns are the same across all distance dataframes here, I can simply use cbind()
identical(pcc[,1:2],spearman[,1:2])
#identical(spearman[,1:2],euclidean[,1:2])
#identical(euclidean[,1:2],mi[,1:2])
identical(spearman[,1:2],mi[,1:2])
#identical(euclidean[,1:2],euclidean_qualitative[,1:2])
#identical(euclidean_qualitative[,1:2],mi_ternary[,1:2])
identical(mi[,1:2],mi_ternary[,1:2])
head(spearman)
head(mi)
head(mi_ternary)
mi_ternary
load('mi_ternary_noMinimalMedia.RData')
head(mi_ternary)
hist(mi_ternary$value)
mi_ternary$value=1-mi_ternary$value
save(mi_ternary,file="Data/mi_ternary_noMinimalMedia.RData")
hist(mi_ternary$value)
#identical(euclidean[,1:2],euclidean_qualitative[,1:2])
#identical(euclidean_qualitative[,1:2],mi_ternary[,1:2])
identical(mi[,1:2],mi_ternary[,1:2])
strain1strain2_allSimilarities=cbind(pcc,
spearman=spearman$value,
#euclidean=euclidean$value,
mi=mi$value,
#euclidean_qualitative=euclidean_qualitative$value,
mi_ternary=mi_ternary$value,
stringsAsFactors=F)
colnames(strain1strain2_allSimilarities)[1:3]=c("strain1","strain2","pcc")
strain1strain2_allSimilarities$strain1=as.integer(strain1strain2_allSimilarities$strain1)
strain1strain2_allSimilarities$strain2=as.integer(strain1strain2_allSimilarities$strain2)
for(i in 3:dim(strain1strain2_allSimilarities)[2]){
strain1strain2_allSimilarities[,i]=as.numeric(strain1strain2_allSimilarities[,i])
}
rownames(strain1strain2_allSimilarities)=as.character(1:7914231) #correct the rownames (don't know why it started with 2)
strain1strain2_allSimilarities_noMinimalMedia=strain1strain2_allSimilarities
save(strain1strain2_allSimilarities_noMinimalMedia,file="Data/strain1strain2_allSimilarities_noMinimalMedia.RData")
load("Data/sourced/strain1strain2_allAnnotations_allSimilarities.RData")
df=strain1strain2_allAnnotations_allSimilarities
hist(df$mi)
str(df$mi)
hist(df$mi_ternary)
summary(df$mi)
##Mutual information
load("Data/mi_all.RData") #generated by mutual_info_quantitative.R
mi=mi_all %>% as.dist %>% melt_dist
str(mi)
hist(mi$value)
#Quantitative:
##PCC
pcc=( cor(t(All_Data_NAimputed)) ) %>% as.dist %>% melt_dist
##Spearman
spearman=( cor(t(All_Data_NAimputed),method="spearman") ) %>% as.dist %>% melt_dist
##Mutual Information (Sho)
##Ref: https://cran.r-project.org/web/packages/infotheo/infotheo.pdf
###start.time = Sys.time()
###mi_ternary=( mutinformation(t(Ternary_Data_324cutff_NAremoved) %>% as.data.frame) %>% natstobits ) %>% melt_dist
###end.time = Sys.time()
###end.time-start.time #Time difference of 1.059961 hours
####save(mi_ternary,file="Data/mi_ternary.RData")
load("Data/mi_ternary.RData")
###start.time = Sys.time()
###mi_ternary_collapsedCond=( mutinformation(t(Ternary_Data_324cutff_condCollapsed) %>% as.data.frame) %>% natstobits ) %>% melt_dist
###end.time = Sys.time()
###end.time-start.time #Time difference of 22.47311 mins
#save(mi_ternary_collapsedCond,file="Data/mi_ternary_collapsedCond.RData")
load("Data/mi_ternary_collapsedCond.RData")
hist(mi_ternary_collapsedCond)
hist(mi_ternary_collapsedCond$Distance)
##GO similarity (Wang method)
load('Data/strain1_strain2_WangBP_WangMF_WangCC.RData')
strain1strain2_allSimilarities=cbind(pcc,
spearman=spearman[[3]],
#euclidean=euclidean[[3]],
mi=mi[[3]],
#euclidean_qualitative=euclidean_qualitative[[3]],
#euclidean_collapsedCond=euclidean_collapsedCond[[3]],
#mhd3=mhd3[[3]],
#mhd3_collapsedCond=mhd3_collapsedCond[[3]],
mi_ternary=mi_ternary[[3]],
mi_ternary_collapsedCond=mi_ternary_collapsedCond[[3]],
Wang_BP=strain1_strain2_WangBP_WangMF_WangCC$BP,
Wang_MF=strain1_strain2_WangBP_WangMF_WangCC$MF,
Wang_CC=strain1_strain2_WangBP_WangMF_WangCC$CC,
stringsAsFactors=F)
colnames(strain1strain2_allSimilarities)[1:3]=c("strain1","strain2","pcc")
strain1strain2_allSimilarities$strain1=as.integer(strain1strain2_allSimilarities$strain1)
strain1strain2_allSimilarities$strain2=as.integer(strain1strain2_allSimilarities$strain2)
for(i in 3:dim(strain1strain2_allSimilarities)[2]){
strain1strain2_allSimilarities[,i]=as.numeric(strain1strain2_allSimilarities[,i])
}
rownames(strain1strain2_allSimilarities)=as.character(1:7914231) #correct the rownames (don't know why it started with 2)
save(strain1strain2_allSimilarities,file="Data/strain1strain2_allSimilarities.RData")
load("Data/strain1_strain2.RData")
load("Data/strain1strain2_allAnnotations.RData")
load("Data/strain1strain2_allSimilarities.RData")
#Check if strain1 - strain2 are all the same for strain1strain2_allAnnotations, strain1strain2_allSimilarities
##identical(strain1strain2_allAnnotations[,1:2],strain1strain2_allSimilarities[,1:2])
##I don't know why the above doesn't work (may be due to some hidden properties of the 2 objs)
##(In both obj: 1. strain1, strain2 are both integer 2. Rownames are the same)
identical(as.integer(strain1strain2_allSimilarities$strain1),strain1strain2_allAnnotations$strain1)
identical(as.integer(strain1strain2_allSimilarities$strain2),strain1strain2_allAnnotations$strain2)
strain1strain2_allAnnotations_allSimilarities=cbind(strain1strain2_allAnnotations,strain1strain2_allSimilarities[,-(1:2)],stringsAsFactors=F)
#Create additional T,F column where T stands for: 2 strains both have at least 1 significant phenotype
dim(sigQuantitative_Data_324cutoff_condCollapsed)
TF=apply(sigQuantitative_Data_324cutoff_condCollapsed,1,FUN=function(row){
sum(row!=0)>0
})
index=rownames(sigQuantitative_Data_324cutoff_condCollapsed)[TF] %>% as.integer
sigOrNot=( (strain1_strain2$strain1 %in% index) & (strain1_strain2$strain2 %in% index) ) #2438736
strain1strain2_allAnnotations_allSimilarities$sigPhenoInBoth=sigOrNot
#delete so the next time these 2 lazy loading objs can be regenerated
file1="Data/sourced/strain1strain2_allAnnotations_allSimilarities.RData.rdb"
file2="Data/sourced/strain1strain2_allAnnotations_allSimilarities.RData.rdx"
if(file.exists(file1) & file.exists(file2)){
file.remove(file1)
file.remove(file2)
}
#change some colnames
names(strain1strain2_allAnnotations_allSimilarities)[names(strain1strain2_allAnnotations_allSimilarities)=='regulator']='regulon'
names(strain1strain2_allAnnotations_allSimilarities)[names(strain1strain2_allAnnotations_allSimilarities)=='Pwy']='pwy'
save(strain1strain2_allAnnotations_allSimilarities,file="Data/sourced/strain1strain2_allAnnotations_allSimilarities.RData")
order(1:5)
order(1:5,increasing=T)
?order
order(1:5,increasing=TRUE)
order(1:5,increasing=True)
order(1:5,decreasing=True)
order(1:5,decreasing=T)
setwd("~/Dropbox/OMP\ shared/peter_wu/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code")
source("Nichols_preload.R")
df=strain1strain2_allAnnotations_allSimilarities
load("/Users/peterwu/Dropbox/OMP shared/peter_wu/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code/new_exps/09_26_no_checked/random_precision/random_precision.RData")
str(random_precision)
tail(random_precision)
setwd("~/Dropbox/OMP\ shared/peter_wu/1st_paper_nichols_reanalysis/github/Systematic-analyses-ecoli-phenotypes/Nichols_data_mining_code")
source("Nichols_preload.R")
#Random expectation
random_expectation=abs(strain1strain2_allAnnotations_allSimilarities$pcc) #avg |PCC| of all pairs
#Function to generate df for the boxplot
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pre_process_for_ggplot=function(abs_cors_for_annotations,abs_cors_for_annotations_all){
#have to turn no_gene_used into a factor in order to get proper color filling
abs_cors_for_annotations$no_gene_used=as.factor(abs_cors_for_annotations$no_gene_used)
abs_cors_for_annotations[[1]]=as.factor(abs_cors_for_annotations[[1]]) #suppose the annotation column is the 1st column
#Lost the way I plot using different colors for genes in n gene pathways, but I think it's not important anymore
df.abs_cors_for_annotations_all=data.frame(annotation=rep(names(abs_cors_for_annotations_all),sapply(abs_cors_for_annotations_all,length)),abs_pcc=unlist(abs_cors_for_annotations_all))
names(df.abs_cors_for_annotations_all)[1]=names(abs_cors_for_annotations)[1]
tab=left_join(df.abs_cors_for_annotations_all,abs_cors_for_annotations[,c(names(abs_cors_for_annotations)[1],"median_pcc","no_gene_used")],by=names(abs_cors_for_annotations)[1])
tab=arrange(tab,as.numeric(no_gene_used),-median_pcc,-abs_pcc) #tab[order(a,-b,-c),] should also work
##Ref about using order(a,-1): https://stackoverflow.com/questions/7793295/how-to-order-a-data-frame-by-one-descending-and-one-ascending-column
##Note: I feel that the part about rev() is BSing. rev() doesn't really help (I wonder if the person really had run it)
tab[[names(abs_cors_for_annotations)[1]]]=factor(tab[[names(abs_cors_for_annotations)[1]]],levels=unique(tab[[names(abs_cors_for_annotations)[1]]]))#Do this to prevent automatic x axis reordering
##ref: https://stackoverflow.com/questions/43877663/order-multiple-variables-in-ggplot2
##ref: http://www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
##Also, I am separating them into 2 lines
return(tab)
}
load("Data/cors_for_Pwy_Pcomplex.RData") #load the required data
text_size=10 #text size for x labels (pwy/pcomplex names)
random_line=geom_hline(yintercept = random_expectation,colour="red",linetype="dashed",size=0.5)
##~~~~ add this block to make the random line thicker~~~~
deviation=0.003
random_line_2=geom_hline(yintercept = random_expectation+deviation,colour="red",linetype="dashed",size=0.5)
random_line_3=geom_hline(yintercept = random_expectation-deviation,colour="red",linetype="dashed",size=0.5)
load("Data/fdr_based_p_val_list.RData")
#get annotation data (pwy, complex)
load("Data/cors_for_Pwy_Pcomplex.RData")
pwy_tab=pre_process_for_ggplot(abs_cors_for_pwys,abs_cors_for_pwys_all)
str(pwy_tab)
load("mi_ternary_5_bin.RData")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path) #only works in RStudio console
setwd(currentDir)
load("mi_ternary_5_bin.RData")
load("mi_ternary_7_bin.RData")
load("mi_ternary_9_bin.RData")
str(mi_ternary_5_bin)
load("mi_ternary_5_bin.RData")
mi_ternary_5_bin=mi_ternary
load("mi_ternary_7_bin.RData")
mi_ternary_7_bin=mi_ternary
load("mi_ternary_9_bin.RData")
mi_ternary_9_bin=mi_ternary
load("mi_ternary_5_bin.RData")
str(mi_ternary)
hist(mi_ternary$value)
load("mi_ternary_5_bin.RData")
mi_ternary$value=1-mi_ternary$value
save(mi_ternary,file="mi_ternary_5_bin.RData")
load("mi_ternary_7_bin.RData")
mi_ternary$value=1-mi_ternary$value
save(mi_ternary,file="mi_ternary_7_bin.RData")
load("mi_ternary_9_bin.RData")
mi_ternary$value=1-mi_ternary$value
save(mi_ternary,file="mi_ternary_9_bin.RData")
load("mi_ternary_9_bin.RData")
hist(mi_ternary$value)
